
@using OdeToFood.Models

@* Because we added the namespace, we can shorten the reference to Restaurant *@
@model Restaurant

@{
    ViewBag.Title = "Create Restaurant page";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h1>Create</h1>

@* We don't need an action  in the form because by default this form will post back to the same
    controller that it was called from. (/home/create) *@
<form method="post">

    @* To add Data Annotation, enclose the element in a div, then add a label element with
        the name of the input property.  This causes Core to check the model for an
        appropriate label and insert it into the label.*@
    <div>

        <label asp-for="Name"></label>
        <input asp-for="Name" />
        @* This is where validation errors for the name as displayed *@
        <span asp-validation-for="Name"></span>
    </div>

    @* We are using a tag helper in our select, instead of specifically creating each items.  The
        asp-items tag helper takes a property of IEnumerable.  Normally, we might grab our list of
        cuisines from a ViewModel, but we are going to use an HTML helper to grab the elements
        directly from the enumeration.
    *@
    <div>
        <label asp-for="Cuisine"></label>
        <select asp-for="Cuisine" asp-items="@Html.GetEnumSelectList<CuisineType>()"></select>
        <span asp-validation-for="Cuisine"></span>
    </div>

    @* When submit is clicked, an Http post is created and posted to /Home/Create, because
        it was submitted from a page named Create in a folder named Home. It knows that
        Name and Cuisine are two values that will be sent to this request.*@

    <input type="submit" name="save" value="Save" />

</form>

@section footer {
    @DateTime.Now.ToShortTimeString()
}

